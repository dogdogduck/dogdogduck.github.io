<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>递归算法</title>
      <link href="/2023/02/25/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
      <url>/2023/02/25/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>The given code implements a recursive approach to perform a deep copy of a linked list with random pointers. It uses a hash map to store the nodes that have already been copied, in order to avoid duplicating nodes.</p><p>Here is an explanation of the code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 自定义一个hash表 */</span></span><br><span class="line">unordered_map&lt;Node*, Node*&gt; cachedNode;</span><br></pre></td></tr></table></figure><p>This line declares a hash map “cachedNode” that maps nodes from the original list to their corresponding copies in the new list. This is used to keep track of nodes that have already been copied, in order to avoid creating duplicate nodes.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 递归 */</span></span><br><span class="line"><span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>This is the recursive “copyRandomList” function that takes the head of the original linked list and returns the head of the copied linked list. If the input “head” is null, the function returns null.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!cachedNode.<span class="built_in">count</span>(head)) &#123;</span><br><span class="line">        Node* headNew = <span class="keyword">new</span> <span class="built_in">Node</span>(head-&gt;val);</span><br><span class="line">        cachedNode[head] = headNew;</span><br><span class="line">        headNew-&gt;next = <span class="built_in">copyRandomList</span>(head-&gt;next);</span><br><span class="line">        headNew-&gt;random = <span class="built_in">copyRandomList</span>(head-&gt;random);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cachedNode[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This block of code first checks if the node “head” has already been copied by looking it up in the hash map. If the node has not been copied, the code creates a new node “headNew” with the same value as the original node, and stores the mapping between the original node and the new node in the hash map.</p><p>The code then recursively copies the “next” and “random” pointers of the original node, and sets them to point to the corresponding new nodes. Note that the recursion will eventually reach the end of the list, at which point “copyRandomList” will return null, so the “next” and “random” pointers of the last node in the list will be correctly set to null.</p><p>Finally, the function returns the new node corresponding to the input “head”.</p><p>To illustrate how this code performs a deep copy, consider the following linked list with random pointers:</p><p>Original List:<br>±–+      ±–+      ±–+      ±–+<br>| 1 |-----&gt;| 2 |-----&gt;| 3 |-----&gt;| 4 |<br>±–+      ±–+      ±–+      ±–+<br>^         ^         ^         |<br>|         |         |         v<br>±–+      ±–+      ±–+      ±–+<br>| 7 |      | 6 |      | 5 |      | 4 |<br>±–+      ±–+      ±–+      ±–+<br>The corresponding new linked list after a deep copy using the given code would look like this:</p><p>Copied List:<br>±–+      ±–+      ±–+      ±–+<br>| 1 |-----&gt;| 2 |-----&gt;| 3 |-----&gt;| 4 |<br>±–+      ±–+      ±–+      ±–+<br>^         ^         ^         |<br>|         |         |         v<br>±–+      ±–+      ±–+      ±–+<br>| 7 |      | 6 |      | 5 |      | 4 |<br>±–+      ±–+      ±–+      ±–+<br>As you can see, the new list is identical to the original list, with each node in the new list having the same value and random pointer as the corresponding node in the original list. However, the new list is a separate, distinct copy of the original list, and changes to one list will not affect this program’s output!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>160.相交链表</title>
      <link href="/2023/02/19/160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/02/19/160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。</p><p>图示两个链表在节点 c1 开始相交：</p><p>题目数据 保证 整个链式结构中不存在环。</p><p>注意，函数返回结果后，链表必须保持其原始结构 。</p><p>自定义评测：</p><p>评测系统 的输入如下（你设计的程序 不适用 此输入）：</p><p>intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0<br>listA - 第一个链表<br>listB - 第二个链表<br>skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数<br>skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数<br>评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被视作正确答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=160 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [160] 相交链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(headA == <span class="literal">nullptr</span> || headB == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *A = headA;</span><br><span class="line">        ListNode *B = headB;</span><br><span class="line">        <span class="keyword">while</span>(A != B)</span><br><span class="line">        &#123;</span><br><span class="line">            A = A == <span class="literal">nullptr</span> ? headB : A-&gt;next;</span><br><span class="line">            B = B == <span class="literal">nullptr</span> ? headA : B-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure><p><a href="%22https://leetcode.cn/problems/intersection-of-two-linked-lists/solution/jiao-ni-yong-lang-man-de-fang-shi-zhao-dao-liang-2/%22">爱的魔力转圈圈</a></p><ul><li><p>双指针相交链表中为什么短的链表指针移动结束后要跳到长的链表上?</p></li><li><p>双指针法在求解链表是否相交问题时常常使用。通常情况下，两个链表的长度可能不一样，因此我们可以创建两个指针分别遍历两个链表。</p></li><li><p>当短的链表的指针到达结尾时，我们将它的指针指向长的链表的头部。如果两个链表相交，两个指针必然会在某一时刻指向同一节点。这样，两个指针在走完两个链表相同长度的路程后，就可以同时遍历到相交节点。</p></li><li><p>如果将短的链表的指针不转移到长的链表上，那么当短的链表遍历完后，长的链表尚未遍历到同样的长度，两个指针永远不会在同一节点相遇。</p></li><li><p>因此，跳到长的链表上是为了使得两个指针走过的长度相等，保证在两个链表相交时，两个指针可以同时到达相交节点。</p></li><li><p>那为什么短的指针不继续在短的链表上移动啊?</p></li><li><p>如果短的指针继续在短的链表上移动，两个指针遍历的长度不会相等，那么当两个链表相交时，它们有可能不能在同一时刻到达相交节点，从而造成遍历结果不准确的情况。</p></li><li><p>因此，将短的指针转移到长的链表上，使得两个指针遍历的长度相等，从而保证遍历结果的准确性。</p></li></ul><hr><ol start="23"><li></li></ol><p>递归是一种解决问题的方法，其基本思想是将原问题转化为规模更小的子问题，直到问题规模足够小，可以直接求解。递归算法的实现过程可以通过以下步骤理解：</p><p>定义递归函数：首先需要定义一个递归函数，该函数能够接收一个或多个参数，并根据参数的不同情况进行不同的操作。通常情况下，递归函数会调用自身来处理规模更小的子问题。</p><p>设定终止条件：为了防止递归函数无限循环调用自身，需要设定一个或多个终止条件。当满足这些条件时，递归函数不再调用自身，而是直接返回某个值或执行某个操作。</p><p>分解问题：在递归函数中，需要将原问题分解为规模更小的子问题，并调用递归函数解决这些子问题。在分解问题的过程中，需要将参数传递给递归函数，以便递归函数能够处理这些子问题。</p><p>合并解决方案：当递归函数处理完所有子问题并返回结果时，需要将这些结果合并成原问题的解决方案。通常情况下，这涉及到对子问题的结果进行一些计算或操作，以得到原问题的解决方案。</p><p>调用递归函数：最后，在主程序中调用递归函数，将原始参数传递给递归函数，启动递归过程。</p><p>需要注意的是，递归算法实现过程中，可能存在栈溢出等问题，因此需要注意递归的深度和复杂度。此外，递归算法可以用循环等方式进行改写，以提高效率和减少风险。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker日常使用</title>
      <link href="/2023/02/03/Docker%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/03/Docker%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>可以在Docker容器启动时通过环境变量设置MySQL初始账号和密码。</p><ul><li>具体步骤如下：</li></ul><ol><li>启动MySQL容器：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="attr">--name</span> some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在启动容器时，使用-e选项设置MYSQL_ROOT_PASSWORD环境变量，该环境变量设置MySQL root用户的密码。</p></li><li><p>在运行容器之后，您可以通过以下方法连接到MySQL容器：</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">exec</span> <span class="operator">-</span>it <span class="keyword">some</span><span class="operator">-</span>mysql mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><ol start="4"><li>连接到MySQL后，您可以使用以下命令创建新用户和数据库：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;newuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>请注意，上述命令仅作为示例。应根据自己的需求调整设置。</p><hr><p>在Spring Boot项目中引用Docker中的MySQL数据，可以在项目的配置文件中设置数据库连接参数。</p><ul><li>以下是配置文件的示例：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>请注意，上面的配置假定您的MySQL容器在本地主机上运行，端口为3306，数据库名称为test，用户名为root，密码为password。请根据自己的实际情况进行调整。</p><p>需要确保已经在项目的依赖中引入MySQL驱动的依赖，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">8.0</span>.<span class="number">22</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>最后，可以使用MyBatis等ORM框架与数据库进行交互，并从数据库中获取数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker|Mysql|Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket.io实现聊天室功能</title>
      <link href="/2023/01/14/socket-io%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%8A%9F%E8%83%BD/"/>
      <url>/2023/01/14/socket-io%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1>使用socket.io实现聊天室的实时通信功能。</h1><ol><li><a href="http://xn--socket-9f7km201a.io">安装socket.io</a>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install socket.io</span><br></pre></td></tr></table></figure><ol start="2"><li>在后端服务器中引入socket.io并启动服务器：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title class_">Server</span>(app)</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>在客户端中引入socket.io并连接服务器：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">&#x27;socket.io-client&#x27;</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="title function_">io</span>(<span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>在服务器端监听客户端连接事件：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理客户端连接的逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>在客户端监听服务器端的消息事件，并通过emit方法发送消息：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端监听服务器端的消息事件</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理接收到的消息</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">socket.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, message)</span><br></pre></td></tr></table></figure><ol start="6"><li>在服务器端监听客户端发送的消息事件，并通过broadcast方法将消息广播给所有客户端：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务器端监听客户端发送的消息事件</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理接收到的消息</span></span><br><span class="line">  <span class="comment">// 将消息广播给所有客户端</span></span><br><span class="line">  socket.<span class="property">broadcast</span>.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参考完整的代码：">参考完整的代码：</h2><h3 id="服务器端：">服务器端：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title class_">Server</span>(app)</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理客户端连接的逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器端监听客户端发送的消息事件</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 处理接收到的消息</span></span><br><span class="line"><span class="comment">// 将消息广播给所有客户端</span></span><br><span class="line">socket.<span class="property">broadcast</span>.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, message)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="客户端：">客户端：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">&#x27;socket.io-client&#x27;</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="title function_">io</span>(<span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端监听服务器端的消息事件</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 处理接收到的消息</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">socket.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, message)</span><br></pre></td></tr></table></figure><blockquote><p>使用socket.io可以实现聊天室的实时通信功能，完整的聊天室功能还需要处理用户登录、发送图片、语音等功能，这里只是简单介绍了如何使用socket.io实现实时通信。</p></blockquote><p><strong>在实际的项目中，聊天室的实现需要考虑用户登录、消息的存储、消息的推送等问题。</strong></p><ul><li><p>用户登录：需要实现用户注册、登录功能，并将用户信息存储在后端服务器中。</p></li><li><p>消息的存储：需要将消息存储在数据库中，方便以后查询历史消息。</p></li><li><p>消息的推送：需要实现消息的推送功能，在用户发送消息时，将消息推送给其他用户。</p></li><li><p>除了使用socket.io实现实时通信，也可以使用其他的技术实现，如WebSocket、HTTP Long Polling等。</p></li></ul><p>总之，实现聊天室需要结合多种技术实现，需要综合考虑各种因素，并适当调整设计方案。</p><hr><h1>下面是一个简单的 Vue.js 使用 <a href="http://Socket.io">Socket.io</a> 实现的聊天室的例子：</h1><ol><li>首先，安装 <a href="http://Socket.io">Socket.io</a> 和 Vue.js：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install socket.io vue</span><br></pre></td></tr></table></figure><p>然后，在你的 Vue.js 项目中引入这两个库：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">&#x27;socket.io-client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br></pre></td></tr></table></figure><p>接着，创建一个 <a href="http://Socket.io">Socket.io</a> <strong>客户端</strong>，并连接到你的服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="title function_">io</span>(<span class="string">&#x27;http://localhost:3000&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在，你可以在 Vue.js 组件中使用 <a href="http://Socket.io">Socket.io</a> 事件来实现聊天功能。例如，你可以在发送消息时触发一个 send-message 事件，并在接收到新消息时触发一个 new-message 事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">messages</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sendMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">      socket.<span class="title function_">emit</span>(<span class="string">&#x27;send-message&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&#x27;new-message&#x27;</span>, <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">messages</span>.<span class="title function_">push</span>(message);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后，在服务器端，你需要监听客户端发送的 send-message 事件，并将新消息广播给所有连接的客户端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="params">socket</span> =&gt;</span> &#123;</span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;send-message&#x27;</span>, <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">    io.<span class="title function_">emit</span>(<span class="string">&#x27;new-message&#x27;</span>, message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此处是一个简单的 Vue.js 使用 <a href="http://Socket.io">Socket.io</a> 实现的聊天室的例子。<br>希望这会对你有所帮助。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/12/hello-world/"/>
      <url>/2023/01/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://WangPropro.github.io">崩溃吧，bugs</a>! This is my very first post. If you get any problems when browsing my blog, you can find the answer in <a href="https://bing.com">troublesAnswer</a> or you can contact me through QQ number 1632347761.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Run-your-first-programme">Run your first programme</h3><h4 id="c">c</h4><ul><li>create a new file named <code>hello.c</code> in your computer</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compile it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="c-2">c++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compile it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ hello.cpp -o hello</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="python">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="java">java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compile it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac hello.java</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java hello</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="javascript">javascript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node hello.js</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="php">php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php hello.php</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="ruby">ruby</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby hello.rb</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="go">go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compile it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build hello.go</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="swift">swift</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swift hello.swift</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="kotlin">kotlin</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compile it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kotlinc hello.kt -include-runtime -d hello.jar</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar hello.jar</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="dart">dart</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compile it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart2native hello.dart -o hello</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="rust">rust</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compile it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustc hello.rs</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="perl">perl</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl hello.pl</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="lua">lua</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua hello.lua</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="scala">scala</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">        println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compile it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scalac hello.scala</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala hello</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="bash">bash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash hello.sh</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="powershell">powershell</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell hello.ps1</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="batch">batch</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo Hello World!</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello.bat</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><h4 id="c-3">c#</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">class</span> <span class="title">hello</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span> &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compile it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csc hello.cs</span><br></pre></td></tr></table></figure><ul><li>run it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello.exe</span><br></pre></td></tr></table></figure><ul><li>you will see the result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><hr><div class="aplayer" data-id="1866185395" data-server="netease" data-type="song" data-mutex="true" data-preload="auto" data-theme="#FF0" data-loop=one></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
